"""
Interfaz web para evaluaci√≥n de escenarios RAG mediante Streamlit.

Este m√≥dulo define una aplicaci√≥n Streamlit que permite seleccionar y ejecutar escenarios de prueba
predefinidos. Cada escenario contiene una consulta del usuario, informaci√≥n contextual y una respuesta esperada.
El flujo de evaluaci√≥n consiste en:

1. Selecci√≥n de un escenario desde un desplegable.
2. Construcci√≥n del prompt de entrada usando una plantilla y los par√°metros del escenario.
3. Ejecuci√≥n del sistema completo RAG (recuperaci√≥n + generaci√≥n) mediante `run_prompt`.
4. Evaluaci√≥n de la respuesta generada frente a la esperada con m√©tricas de recuperaci√≥n y coherencia sem√°ntica.
5. Visualizaci√≥n del resultado, incluyendo:
   - M√©tricas de evaluaci√≥n.
   - Respuesta generada (itinerario propuesto).
   - Documentos recuperados durante el proceso.

Componentes principales:
- `load_formatted_prompt`: Construye el prompt estructurado a partir de los datos del escenario.
- `run_prompt`: Ejecuta el grafo de LangGraph y devuelve la respuesta generada y los documentos utilizados.
- `Evaluator`: Calcula m√©tricas como `Recall adaptativo` y `Coherencia Sem√°ntica`.

Requiere archivos de escenario YAML ubicados en el directorio correspondiente, accesibles mediante `get_available_scenarios`.

Uso:
Ejecutar `streamlit run webapp/app_test.py` desde la ra√≠z del proyecto.
"""

import streamlit as st

from modules.prompt_utils import load_formatted_prompt
from webapp.evaluation.evaluator import Evaluator
from webapp.evaluation.scenario_utils import (
    get_available_scenarios,
    load_scenario_by_name,
)
from webapp.runner import run_prompt

st.set_page_config(page_title="KoalaTest", page_icon="üê®üõ†Ô∏è", layout="centered")
st.title("Evaluador de escenarios de prueba")

available_scenarios = get_available_scenarios()

if not available_scenarios:
    st.warning("No se encontraron archivos de escenario.")
else:
    selected_scenario = st.selectbox("Selecciona un escenario:", available_scenarios)

    if st.button("Ejecutar evaluaci√≥n"):
        with st.spinner("Procesando escenario..."):
            # Cargar datos del escenario
            scenario_data = load_scenario_by_name(selected_scenario)

            # Construir prompt completo
            interest_str = (
                ", ".join(scenario_data["interests"])
                if scenario_data.get("interests")
                else "cualquier tipo de actividad"
            )
            full_prompt = (
                load_formatted_prompt(
                    "prompt_base",
                    days=scenario_data["duration_days"],
                    budget=scenario_data["budget"].lower(),
                    travel_type=scenario_data["travel_type"].lower(),
                    interests=interest_str,
                )
                + scenario_data["user_input"]
            )

            # Ejecutar el sistema
            generated_output = run_prompt(full_prompt)

            # A√±adir resultados al escenario para evaluaci√≥n
            generated_response = generated_output.get("generated_response", "")
            retrieved_docs = generated_output.get("retrieved_docs", [])

            scenario_data["retrieved_docs"] = retrieved_docs

            # Evaluar
            evaluator = Evaluator()
            result = evaluator.evaluate_scenario(scenario_data)

        st.success("‚úÖ Evaluaci√≥n completada.")
        st.subheader("üìä Resultado de la evaluaci√≥n")
        st.json(result)

        st.subheader("üìù Respuesta generada (itinerario)")
        st.markdown(generated_response)

        if retrieved_docs:
            st.subheader("üìö Documentos recuperados")
            for doc in retrieved_docs:
                st.markdown(f"- `{doc.get('id')}`")
